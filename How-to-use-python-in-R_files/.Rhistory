updateR()
if(!require(installr)){}
if(!require(installr)) {
install.packages("installr");
require(installr)
}
update.packages()
update.packages(ask = FALSE)
packs = as.data.frame(installed.packages(.libPaths()[1]), stringAsFactors = F)
install.packages(packs$Package)
install.packages(packs$Package)
install.packages(packs$Package)
install.packages(packs$Package)
if(!require(installr)) {
install.packages("installr");
require(installr)
if(!require(installr)) {
install.packages("installr");
require(installr)
}
stop
if(!require(installr)) {
install.packages("installr");
require(installr)
}
install.packages("plotfunctions")
install.packages("installr")
demo()
error.catching
crc_workload <- read.csv("~/Documents/CRC Supv/crc_workload.csv")
View(crc_workload)
MCA(crc_workload, ncp = 5, graph =TRUE)
install.packages(c("FactoMineR", "factoextra"))
library("FactoMineR")
library("factoextra")
data(crc_workload)
df <- read.csv("~/Documents/CRC Supv/crc_workload.csv")
head(df[,1:7, 3])
tail(df[,1:7, 3])
df.active <- df[1:31, 5:37]
headtail(df.active[,, 3])
headtail(df.active[,:, 3])
headtail(df.active[, 3])
headtail(df.active[, 3])
headtail(df.active[,1:7, 3])
head(df.active[,1:7, 3])
head(df.active[,1:31, 3])
summary(df.active)[,1:4]
for (i in 1:4) {
plot(df.active[,i], main=colnames)df.active)[i],
ylab= "Count", col="steelblue", las=2)
}
for (i in 1:4) {
plot(df.active[,i], main=colnames)df.active)[i],
ylab= "Count", col="steelblue", las=2)}
for (i in 1:4) {
plot(df.active[,i], main=colnames)df.active)[i],
ylab= "Count" , col="steelblue", las=2)}
or (i in 1:4) {
plot(df.active[,i], main=colnames(df.active)[i],
ylab = "Count", col="steelblue", las = 2)
}
for (i in 1:4) {
plot(df.active[,i], main=colnames(df.active)[i],
ylab = "Count", col="steelblue", las = 2)}
res.mca <- MCA(df.active, graph=TRUE)
res.mca <- MCA(df, graph=TRUE)
res.mca <- MCA(df.active, graph=TRUE)
df.active = subset(df, select = -c(how busy_crc, high_demand_superv, crc_ranking, superv_rank)
drop <- c("how busy_crc", "high_demand_superv", "crc_ranking", "superv_rank"))
drop <- c("how busy_crc", "high_demand_superv", "crc_ranking", "superv_rank")
df.active = df[!(names(df)%in%drop)]
res.mca <- MCA(df.active, graph=TRUE)
drop <- c("how busy_crc", "high_demand_superv", "crc_ranking", "superv_rank", "study_name","crc","per_time")
df.active = df[!(names(df)%in%drop)]
rop <- c("how_busy_crc", "high_demand_superv", "crc_ranking", "superv_rank", "study_name","crc","per_time")
df.active = df[!(names(df)%in%drop)]
drop <- c("how_busy_crc", "high_demand_superv", "crc_ranking", "superv_rank", "study_name","crc","per_time")
df.active = df[!(names(df)%in%drop)]
res.mca <- MCA(df.active, graph=TRUE
)
res.mca <- MCA(df.active, np = 9, graph=TRUE)
res.mca <- MCA(df.active, ncp = 9, graph=TRUE)
drop <- c("study_id","how_busy_crc", "high_demand_superv", "crc_ranking", "superv_rank", "study_name","crc","per_time")
df.active = df[!(names(df)%in%drop)]
res.mca <- MCA(df.active, ncp = 9, graph=TRUE)
Xfac = factor(df.active[,1], ordered = TRUE)
Xfac = factor(df.active[,1], ordered = TRUE)
for (i in 2:31){
tfac = factor(df.active[,i], ordered = TRUE)
Xfac = df.active(Xfac, tfac)}
Xfac = factor(df.active[,1], ordered = TRUE)
for (i in 2:31){
tfac = factor(df.active[,i], ordered = TRUE)
Xfac = data.frame(Xfac, tfac)}
Xfac = factor(df.active[,1], ordered = TRUE)
for (i in 1:29){
tfac = factor(df.active[,i], ordered = TRUE)
Xfac = data.frame(Xfac, tfac)}
res.mca <- MCA(df.active, graph=TRUE)
MCA(Xfac, graph=TRUE)
res.mca <- MCA(Xfac, graph=TRUE)
eig.val <- get_eigenvalue((res.mca))
fviz_screeplot(res.mca, addlabels = TRUE, ylim = c(0, 45))
fviz_mca_biplot(res.mca,
repel = TRUE, #Avoid text overlapping (slow if many points)
ggtheme = theme_minimal())
var <- get_mca_var(res.mca)
var
fviz_mca_var(res.mca, choice - "mca.cor",
repel = TRUE,
ggtheme = theme_minimal())
fviz_mca_var(res.mca, choice = "mca.cor",
repel = TRUE,
ggtheme = theme_minimal())
head(round(car$coord, 2),4)
head(round(cor$coord, 2),4)
head(round(var$coord, 2),4)
df.active[,] <- factor(df[,])
drop <- c("study_id","how_busy_crc", "high_demand_superv", "crc_ranking", "superv_rank", "study_name","crc","per_time")
df.active = df[!(names(df)%in%drop)]
df.active[,] <- factor(df[,])
drop <- c("study_id","how_busy_crc", "high_demand_superv", "crc_ranking", "superv_rank", "study_name","crc","per_time")
df.active = df[!(names(df)%in%drop)]
df.active[,1:29] <- factor(df[,2:29])
drop <- c("study_id","how_busy_crc", "high_demand_superv", "crc_ranking", "superv_rank", "study_name","crc","per_time")
df.active = df[!(names(df)%in%drop)]
df.active[,:29] <- factor(df[,:29])
df.active[,'low_demand'] <- factor(df[,'low_demand'])
col_names <-names(df.active)
df.active[,col_names] <- lapply(df.active[,col_names],factor)
res.mca <- MCA(df.active, graph=TRUE)
eig.val <- get_eigenvalue((res.mca))
fviz_screeplot(res.mca, addlabels = TRUE, ylim = c(0, 45))
fviz_mca_biplot(res.mca,
repel = TRUE, #Avoid text overlapping (slow if many points)
ggtheme = theme_minimal())
var <- get_mca_var(res.mca)
var
fviz_mca_var(res.mca, choice = "mca.cor",
repel = TRUE,
ggtheme = theme_minimal())
head(round(var$coord, 2),4)
fviz_cos2(res.mca, choice = "var", axes = 1:2)
fviz_contrib(res.mca, choice = "var", axes = 1, top = 15)
fviz_contrib(res.mca, choice = "var", axes = 2, top = 15
)
fviz_contrib(res.mca, choice = "var", axes = 3, top = 15)
fviz_contrib(res.mca, choice = "var", axes = 4, top = 15)
fviz_mca_var(res.mca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, # avoid text overlapping (slow)
ggtheme = theme_minimal()
)
ind <- get_mca_ind(res.mca)
ind
# Coordinates of column points
head(ind$coord)
# Quality of representation
head(ind$cos2)
# Contributions
head(ind$contrib)
viz_mca_ind(res.mca,
label = "none", # hide individual labels
habillage = "Vomiting", # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, ellipse.type = "confidence",
ggtheme = theme_minimal())
fviz_mca_ind(res.mca,
label = "none", # hide individual labels
habillage = "Vomiting", # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, ellipse.type = "confidence",
ggtheme = theme_minimal())
fviz_mca_ind(res.mca,
label = "none", # hide individual labels
habillage = "n_visits", # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, ellipse.type = "confidence",
ggtheme = theme_minimal())
fviz_mca_ind(res.mca,
label = "none", # hide individual labels
habillage = "n_visits_1", # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, ellipse.type = "confidence",
ggtheme = theme_minimal())
View(res.mca)
fviz_mca_ind(res.mca,
label = "none", # hide individual labels
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, ellipse.type = "confidence",
ggtheme = theme_minimal())
# habillage = index of the column to be used as grouping variable
fviz_mca_ind(res.mca, habillage = 1, addEllipses = TRUE)
# habillage = external grouping variable
fviz_mca_ind(res.mca, habillage = poison$Vomiting, addEllipses = TRUE)
# habillage = index of the column to be used as grouping variable
fviz_mca_ind(res.mca, habillage = 2, addEllipses = TRUE)
# habillage = external grouping variable
fviz_mca_ind(res.mca, habillage = poison$Vomiting, addEllipses = TRUE)
fviz_mca_ind(res.mca, habillage = 2, addEllipses = TRUE)
# habillage = external grouping variable
fviz_mca_ind(res.mca, habillage = df$high_demand_crc, addEllipses = TRUE)
fviz_mca_ind(res.mca, habillage = 2, addEllipses = TRUE)
# habillage = external grouping variable
fviz_mca_ind(res.mca, habillage = df$crc, addEllipses = TRUE)
fviz_mca_ind(res.mca, habillage = 1, addEllipses = TRUE)
# habillage = external grouping variable
fviz_mca_ind(res.mca, habillage = df$low_demand, addEllipses = TRUE)
scree.plot <- fviz_eig(res.mca)
res.mca <- MCA(df, ind.sup = 32:35,
quanti.sup = 1:2, quali.sup = 3:4,  graph=FALSE)
res.mca <- MCA(df.active, ind.sup = 32:35,
quanti.sup = 1:2, quali.sup = 3:4,  graph=FALSE)
res.mca <- MCA(df.active, ind.sup = 53:55,
quanti.sup = 1:2, quali.sup = 3:4,  graph=FALSE)
res.mca <- MCA(df.active, ind.sup = 31:3,
quanti.sup = 1:2, quali.sup = 3:4,  graph=FALSE)
res.mca <- MCA(df.active, ind.sup = 31:33,
quanti.sup = 1:2, quali.sup = 3:4,  graph=FALSE)
res.mca <- MCA(df.active, ind.sup = 30:31,
quanti.sup = 1:2, quali.sup = 3:4,  graph=FALSE)
fviz_mca_var(res.mca, choice = "mca.cor",
repel = TRUE)
--updateall
-update
updateR
help()
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = Xg7NJcj1MG$87)
updateR(admin_password = 'Xg7NJcj1MG$87')
library(updateR)
install.packages(updateR)
install_github('andreacirilloac/updateR')
install_github('andreacirilloac/updateR', force=True)
install_github('andreacirilloac/updateR', force=TRUE)
help(updateR)
installed.packages()
update.packages(checkBuilt=TRUE)
y
y
y
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Admin user password')
install.packages("devtools")
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Xg7NJcj1MG$87')
updateR(auto = TRUE)
updateR(auto = TRUE)
updateR(auto = TRUE)
R.version
rstudioapi::addTheme("https://raw.githubusercontent.com/jnolis/synthwave85/master/Synthwave85.rstheme", TRUE, TRUE, FALSE)
install.packages(rstudioapi)
rstudioapi::addTheme("https://raw.githubusercontent.com/jnolis/synthwave85/master/Synthwave85.rstheme", TRUE, TRUE, FALSE)
rstudioapi::addTheme("https://raw.githubusercontent.com/jnolis/synthwave85/master/Synthwave85.rstheme", TRUE, TRUE, FALSE)
library(rstudioapi)
install.packages('rstudioapi')
rstudioapi::addTheme("https://raw.githubusercontent.com/jnolis/synthwave85/master/Synthwave85.rstheme", TRUE, TRUE, FALSE)
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
py_install('pandas')
library(reticulate)
conda_create('r-reticulate')
conda_install(r-reticulate, 'scipy','pandas','seaborn')
conda_install(r-reticulate, 'scipy')
conda_install('r-reticulate', 'scipy', 'pandas','seaborn')
conda_install('r-reticulate', 'scipy', 'pandas','matplotlib')
scipy <- import('scipy')
np <- import("numpy")
plt <-import("matplotlib")
pd <- import('pandas')
pd <- import("pandas")
virtualenv_install('pandas')
virtualenv_install('r-reticulate','pandas')
pd<-import("pandas")
np.array([1,2,3])
np.array(1,2,3)
py_install("pandas")
py_install("pandas", 'matplotlib', 'seaborn')
py_install("pandas")
py_install("pandas")
py_install('matplotlib')
pu_install('seaborn')
pd <-import('pandas')
library(reticulate)
python_path <- "/anaconda/bin/python"
use_python(python_path)
knitr::opts_chunk$set(echo = TRUE)
py_config()
reticulate::use_pyton(python_path)
reticulate::use_python(python_path)
conda_remove('r-reticulate')
repl_python()
library(reticulate)
repl_python()
repl_python()
remove.packages(reticulate)
remove.packages('reticulate)
remove.packages('reticulate')
installed.packages()
installed.packages(max.print)
installed.packages(max.print = 100)
installed.packages(max.print = 150)
installed.packages()[50:100,]
install.packages('reticulate')
install.packages("reticulate")
installed.packages()[50:100,]
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
repl_python()
py_install('pandas')
sys <-import('sys)
sys <-import('sys')
sys <-import('pandas')
pd <-import('pandas')
plt <-import('matplotlib')
py_install('matplotlib')
py_install('seaborn')
r_array <- py$my_python_array
class(r_array)
r_vector <- as.vector(py$my_python_array)
class(r_array)
r_vector <- r_vector *2
sns<-import("seaborn")
df1 <- data.frame(tappy(r_array))
df1 <- data.frame(tapply(r_array))
df <- datasets::AirPassengers
df1 <- data.frame(tapply(df, list(year = floor(time(df)), month = month.abb[cycle(df)]), c))
df1
df1<-df1[month.abb]
sns$heatmap(r_to_py(df1), fmt='g', cmap='viridis')
plt$show()
sns$heatmap(r_to_py(df1), fmt='g', cmap='viridis')
plt$show()
plt
plt<-import('matplotlib')
sns$heatmap(r_to_py(df1), fmt='g', cmap='viridis')
plt$show()
View(sys)
View(df1)
View(sns)
sns$heatmap(r_to_py(df1), fmt='g', cmap='viridis')
sns$show()
graph1<-sns$heatmap(r_to_py(df1), fmt='g', cmap='viridis')
View(graph1)
View(df1)
graph1<-sns$heatmap(r_to_py(df1), fmt='g', cmap='viridis')
library(reticulate)
sns<-import('seaborn')
pd<-import('pandas')
sns$heatmap(r_to_py(df1), fmt='g', cmap='viridis')
plt$show()
sns$heatmap(r_to_py(df1), fmt='g', cmap='viridis')
plt.show()
repl_python()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
sns<- import('seaborn')
plt<- import('matplotlib.pyplot')
pd <- import('pandas')
df <- datasets::AirPassengers
df1<-data.frame(tapply(df, list(year= floor(time(df)), month = month.abb[cycle(df)]),c))
df1<- df1[month.abb]
df1
sns$heatmap(r_to_py(df1), fmt='g', cmap='viridis')
plt$show()
sns$pairplot(r_to_py(iris), hue='Species')
plt$show()
df2<- py$data(df1)
df2 <- py$df1
df2
df2<- (py$df1)**2
df2
a <- py$x
b <- py$y
a
b
a <- py$x
b <- py$y
vector <-c(py$list)
vector
a <- py$x
b <- py$y
vector <-c(py$list)
data_frame <- data.frame(tapply(py$dataframe))
a <- py$x
b <- py$y
vector <-c(py$list)
data_frame <- data.frame(tapply(py$dataframe, list()))
a <- py$x
b <- py$y
vector <-c(py$list)
data_frame <- py_to_r(dataframe)
a <- py$x
b <- py$y
vector <-c(py$list)
data_frame <- py_to_r(dataframe)
a <- py$x
b <- py$y
vector <-c(py$list)
data_frame <- data.frame(py$dataframe)
data_frame
a <- py$x + 1
b <- py$y +2
c<- py$x + py$y
vector <-c(py$list)
data_frame <- data.frame(py$dataframe)
a
b
c
vector
data_frame
a <- py$x + 1
b <- py$y +2
c<- py$x + py$y
vector <-c(py$list)
data_frame <- data.frame(py$dataframe)
data_frame2 <- (data_frame)**2
a
b
c
vector
data_frame
a <- py$x + 1
b <- py$y +2
c<- py$x + py$y
vector <-c(py$list)
data_frame <- data.frame(py$dataframe)
data_frame2 <- (data_frame)**2
a
b
c
vector
data_frame
